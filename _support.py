import keyboards
import states
from telegram import Update
from telegram.ext import ContextTypes
from managers import Utility
import logging
import inspect
from database import TicketDb
import os

tickets_db = TicketDb()

logger = logging.getLogger(__name__)

class _support:

    support_thread_id = int(os.getenv('SUPPORT_THREAD_ID'))
    support_group_id = int(os.getenv('SUPPORT_GROUP_ID'))

    async def _open_support_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        active_tickets = tickets_db.get_all_tickets(query.from_user.id)
        active_tickets = [t for t in active_tickets if t[8] != 'answered']
        
        if active_tickets:
            message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
            for ticket in active_tickets:
                message += (
                    "--------------------\n"
                    f"üÜî –¢–∏–∫–µ—Ç #{ticket[2]}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket[3]}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[7]}\n"
                    f"üìÖ –î–∞—Ç–∞: {ticket[9]}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n\n"
                )
            
            message += "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            message += "1. –î–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã\n"
            message += "2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã)\n"

            await query.message.edit_text(
                message,
                reply_markup=keyboards.support()
            )
        else:
            await query.message.edit_text(
                "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboards.support()
            )
        return states.WAITING_FOR_ACTION
    
    async def show_user_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        query = update.callback_query
        
        tickets = tickets_db.get_all_tickets(user.id)
        if not tickets:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤."
        else:
            message = "üìã –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:\n\n"
            for ticket in tickets:
                status = "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ" if ticket[8] == 'answered' else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
                message += (
                    "--------------------\n"
                    f"üÜî –¢–∏–∫–µ—Ç #{ticket[2]}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: \n{ticket[3]}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[7]}\n"
                    f"üìÖ –î–∞—Ç–∞: {ticket[9]}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–∫–µ—Ç
                responses = tickets_db.get_ticket_responses(ticket[0])
                if responses:
                    message += "\nüí¨ –û—Ç–≤–µ—Ç—ã:\n"
                    for i, response in enumerate(responses, 1):
                        message += f"{i}. {response[3]}\n"
                        if response[4]:  # photo_id
                            message += "   üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ\n"
                        if response[5]:  # video_id
                            message += "   üé• –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–∏–¥–µ–æ\n"
                        if response[6]:  # file_id
                            message += "   üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª\n"
                
                message += "\n"
        
        if query:
            await query.message.edit_text(message, reply_markup=keyboards.main_menu())
        else:
            await update.message.reply_text(message, reply_markup=keyboards.main_menu())
    
    async def _create_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        active_tickets = tickets_db.get_all_tickets(query.from_user.id)
        active_tickets = [t for t in active_tickets if t[8] != 'answered']
        for ticket in active_tickets:
            tickets_db.update_ticket_status(ticket[0], 'closed')

        await query.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "1. –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Ç.–¥.)\n"
            "2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "3. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "4. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=keyboards.back_to_main_menu()
        )
        return states.WAITING_FOR_TICKET_DESCRIPTION
    
    async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        user = update.effective_user
        phone = update.message.text

        group_id = _support.support_group_id
        thread_id = _support.support_thread_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if not await Utility.is_valid_phone(phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                "üì± –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
                "‚Ä¢ 89123456789\n"
                "‚Ä¢ 79001234567\n"
                "‚Ä¢ 89991234567\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä):"
            )
            return states.WAITING_FOR_PHONE
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} ({user.id})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        ticket = tickets_db.get_latest_ticket(user.id)
        if ticket:
            tickets_db.update_ticket_phone(ticket[0], phone)
            
            message = (
                f"üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket[2]}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìÖ –î–∞—Ç–∞: {ticket[9]}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket[3]}\n\n"
                f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å: <code>/reply {user.id} {ticket[2]} </code>"
            )
            try:
                if ticket[4]:  # photo_id
                    await context.bot.send_photo(
                        chat_id=group_id,
                        message_thread_id=thread_id,
                        photo=ticket[4],
                        caption=message,
                        parse_mode='HTML'
                    )
                elif ticket[5]:  # video_id
                    await context.bot.send_video(
                        chat_id=group_id,
                        message_thread_id=thread_id,
                        video=ticket[5],
                        caption=message,
                        parse_mode='HTML'
                    )
                elif ticket[6]:  # file_id
                    await context.bot.send_document(
                        chat_id=group_id,
                        message_thread_id=thread_id,
                        document=ticket[6],
                        caption=message,
                        parse_mode='HTML'
                    )
                else:
                    await context.bot.send_message(chat_id=group_id, message_thread_id=thread_id, text=message, parse_mode='HTML')
            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∏–∫–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=keyboards.main_menu()
                )
                return states.WAITING_FOR_ACTION
        
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã'.",
            reply_markup=keyboards.main_menu()
        )
        
        return states.WAITING_FOR_ACTION
    
    async def _rate_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        ticket_id = context.user_data.pop('closed_ticket_id', None)
        if not ticket_id:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ç–∏–∫–µ—Ç–∞")
            return states.WAITING_FOR_ACTION
        rating = int(query.data.split(' ')[1])
        tickets_db.rate_ticket(ticket_id, rating)
        await query.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.main_menu()
        )
        return states.WAITING_FOR_ACTION
    
    async def handle_ticket_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        photo = update.message.photo[-1] if update.message.photo else None
        video = update.message.video if update.message.video else None
        document = update.message.document if update.message.document else None
        
        description = update.message.caption if (photo or video or document) else update.message.text
        
        if not description:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–º—É —Ç–∏–∫–µ—Ç—É."
            )
            return states.WAITING_FOR_TICKET_DESCRIPTION
        
        ticket_id = len(tickets_db.get_all_tickets(user.id)) + 1
        tickets_db.add_ticket(
            user_id=user.id,
            ticket_id=ticket_id,
            description=description,
            photo_id=photo.file_id if photo else None,
            video_id=video.file_id if video else None,
            file_id=document.file_id if document else None
        )
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n\n"
            "üì± –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
            "‚Ä¢ 89123456789\n"
            "‚Ä¢ 79001234567\n"
            "‚Ä¢ 89991234567\n\n"
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ +7 (123) 456-78-90\n"
            "‚Ä¢ 8-123-456-78-90\n"
            "‚Ä¢ 123456789\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä):"
        )
        return states.WAITING_FOR_PHONE