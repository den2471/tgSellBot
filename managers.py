import os
import logging
import re
from telegram import Update
from telegram.ext import ContextTypes
import states
import keyboards
import inspect
from database import (
    TicketDb,
    WarrantyDb,
    PackedData
)
from datetime import datetime
from media_handler import MediaManager
from re_codes import Format

logger = logging.getLogger(__name__)
media_manager = MediaManager()
tickets_db = TicketDb()
warranty_db = WarrantyDb()

class BotCallbackData:
    NEXT_LICENCE = "next_licence"
    LICENCE_ACCEPTED = "licence_accepted"

class BotContextData:
    LICENCE_INDEX = "licence_index"

class Utility:

    support_thread_id = int(os.getenv('SUPPORT_THREAD_ID'))
    codes_thread_id = int(os.getenv('CODES_THREAD_ID'))
    
    async def get_thread_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            group_id = update.message.chat_id
            thread_id = update.message.message_thread_id
            await update.message.reply_text(f'ID –≥—Ä—É–ø–ø—ã {group_id}\nID —Ç–æ–ø–∏–∫–∞ {thread_id}')
        except:
            print('Error')
            pass
    
    async def is_valid_phone(phone):
        phone = re.sub(r'\D', '', phone)
        return len(phone) in [10, 11]
    
    async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
        thread_id = update.message.message_thread_id
        if thread_id == Utility.support_thread_id:
            message = "" \
            "–°–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Ç–∞ —Ç–æ–ø–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n" \
            "\n" \
            "<code>/id</code> - —É–∑–Ω–∞—Ç—å id —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞\n" \
            "\n" \
            "<code>/newsletter [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]</code> - –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–Ω—è–≤—à–∏–º –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/newsletter —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n" \
            "\n" \
            "<code>/approve_warranty [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - –æ–¥–æ–±–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/approve_warranty ATJ10561484807</b>\n" \
            "\n" \
            "<code>/reply [tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞] [—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞]</code> - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å 1 –º–µ–¥–∏—Ñ–∞–π–ª.\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/reply 123456789 1 —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</b>\n" \
            "\n" \
            "<code>/direct_reply [tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å 1 –º–µ–¥–∏—Ñ–∞–π–ª.\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/direct_reply 123456789 —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</b>\n\n"
        elif thread_id == Utility.codes_thread_id:
            message = "" \
            "–°–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Ç–∞ —Ç–æ–ø–∏–∫–∞ –∫–æ–¥–æ–≤ –∫–æ–Ω—Å–æ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n" \
            "\n" \
            "<code>/id</code> - —É–∑–Ω–∞—Ç—å id —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞\n" \
            "\n" \
            "<code>/data [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–æ–ª–∏\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/data ATJ10561484807</b>\n" \
            "\n" \
            "<code>[–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>ATJ10561484807</b>\n" \
            "\n" \
            "<code>/remove [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–æ–ª–∏ –∏–∑ –±–∞–∑—ã\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/remove ATJ10561484807</b>\n" \
            "\n" \
            "<code>/sell [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏] [–¥–∞—Ç–∞]</code> - –ø–æ–º–µ—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—É—é. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É –∫–∞–∫ —Å –¥–∞—Ç–æ–π —Ç–∞–∫ –∏ –±–µ–∑. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É, —Ç–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/sell ATJ10561484807 31-12-2025</b>\n" \
            "\n" \
            "<code>/unsell [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–µ. –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/unsell ATJ10561484807</b>\n" \
            "\n" \
            "<code>/bind [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏] [tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code> - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/bind ATJ10561484807 123456789</b>\n" \
            "\n" \
            "<code>/unbind [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫–æ–Ω—Å–æ–ª–∏. –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/unbind ATJ10561484807</b>\n" \
            "\n" \
            "<code>/approve [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏] [–¥–∞—Ç–∞]</code> - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É, –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ. –ò—Å—Ö–æ–¥—è –∏–∑ –¥–∞—Ç—ã –±—É–¥–µ—Ç —Ä–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/approve ATJ10561484807 31-12-2025</b>\n" \
            "\n" \
            "<code>/unapprove [–∫–æ–¥ –∫–æ–Ω—Å–æ–ª–∏]</code> - –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "<b>/unapprove ATJ10561484807</b>"
        
        await update.message.reply_text(message, parse_mode='HTML')


class SupportManager:

    support_thread_id = int(os.getenv('SUPPORT_THREAD_ID'))
    date_format = '%d-%m-%Y'

    async def _check_thread(update: Update):
        if update.message.message_thread_id == SupportManager.support_thread_id:
            return True
        
    async def _date_check(date):

        try:
            datetime.strptime(date, SupportManager.date_format)
            return True
        except:
            return False

    async def manual_warranty_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await SupportManager._check_thread(update):
            try:
                re_code = re.match(r'(?i)^/approve_warranty ('+Format.console_code+r')$', update.message.text)
                console_id = re_code.group(1)
                console: PackedData = warranty_db.get_packed(console_id)
                if not await console.exist():
                    await update.message.reply_text("‚ûñ –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                if not await console.sold():
                    await update.message.reply_text("‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –ø—Ä–æ–¥–∞–Ω–∞")
                    return
                elif not await console.bound():
                    await update.message.reply_text("‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                    return
                elif await console.approved():
                    await update.message.reply_text("‚ùå –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å–æ–ª—å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞")
                    return
                
                if warranty_db.approve_warranty(console_id):
                    await update.message.reply_text("‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞!")
                    try:
                        await context.bot.send_message(
                            chat_id=console.tg_id,
                            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ {console_id}!\n\n"
                                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 548 –¥–Ω–µ–π:\n"
                                "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∑–∞ –Ω–∞—à —Å—á–µ—Ç\n"
                                "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç\n"
                                "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
                                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –≥–∞—Ä–∞–Ω—Ç–∏–∏.",
                            reply_markup=keyboards.warranty()
                        )
                    except Exception as e:
                        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')
                    
            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")

    async def direct_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await SupportManager._check_thread(update):
            try:
                try:
                    re_code = re.match(r'(?i)^/direct_reply ('+Format.tg_id+') (.+)', update.message.text)
                except:
                    re_code = re.match(r'(?i)^/direct_reply ('+Format.tg_id+') (.+)', update.message.caption)
                user_id = re_code.group(1)
                message_text = re_code.group(2)

                photo = update.message.photo[-1] if update.message.photo else None
                video = update.message.video if update.message.video else None
                document = update.message.document if update.message.document else None

                try:
                    if photo:
                        await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo.file_id,
                            caption=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: \n\n{message_text}",
                            reply_markup=keyboards.back_to_main_menu()
                        )
                    elif video:
                        await context.bot.send_video(
                            chat_id=user_id,
                            video=video.file_id,
                            caption=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: \n\n{message_text}",
                            reply_markup=keyboards.back_to_main_menu()
                        )
                    elif document:
                        await context.bot.send_document(
                            chat_id=user_id,
                            document=document.file_id,
                            caption=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: \n\n{message_text}",
                            reply_markup=keyboards.back_to_main_menu()
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: \n\n{message_text}",
                            reply_markup=keyboards.back_to_main_menu()
                        )
                    
                    await update.message.reply_text(
                        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
                    )
                    
                except Exception as e:
                    logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
                    )

            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                )

    async def ticket_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        if await SupportManager._check_thread(update):
            try:
                try:
                    re_code = re.match(r'(?i)^/reply ('+Format.tg_id+r') (\d+) (.+)', update.message.text)
                except:
                    re_code = re.match(r'(?i)^/reply ('+Format.tg_id+r') (\d+) (.+)', update.message.caption)
                user_id = int(re_code.group(1))
                ticket_id = int(re_code.group(2))
                response_text = re_code.group(2)
                
                photo = update.message.photo[-1] if update.message.photo else None
                video = update.message.video if update.message.video else None
                document = update.message.document if update.message.document else None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                tickets_db.add_response(
                    ticket_id=ticket_id,
                    user_id=user_id,
                    response_text=response_text,
                    photo_id=photo.file_id if photo else None,
                    video_id=video.file_id if video else None,
                    file_id=document.file_id if document else None
                )

                tickets_db.update_ticket_status(ticket_id, 'answered')

                try:
                    if photo:
                        await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo.file_id,
                            caption=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                        )
                    elif video:
                        await context.bot.send_video(
                            chat_id=user_id,
                            video=video.file_id,
                            caption=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                        )
                    elif document:
                        await context.bot.send_document(
                            chat_id=user_id,
                            document=document.file_id,
                            caption=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                        )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
                    context.user_data['closed_ticket_id'] = ticket_id
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚úÖ –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                        reply_markup=keyboards.supp_rating()
                    )
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    await update.message.reply_text(
                        f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}"
                    )
                except Exception as e:
                    logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
                    )

            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

            return states.WAITING_FOR_TICKET_RESPONSE

    async def newsletter(update: Update, context: ContextTypes.DEFAULT_TYPE):
        message_text = re.match(r'(?i)^/newsletter (.+)', update.message.text).group(1)
        
        users = tickets_db.get_all_users()
        
        success_count = 0
        fail_count = 0
        
        for user_id in users:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text
                )
                success_count += 1
            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                fail_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        await update.message.reply_text(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
        )

class ConsoleCodes:

    codes_thread_id = int(os.getenv('CODES_THREAD_ID'))

    async def _check_thread(update: Update):
        if update.message.message_thread_id == ConsoleCodes.codes_thread_id:
            return True
    
    async def _extract_user_id(command, string):
        extracted = re.search(r' \d+$', string)
        id = extracted.group(1)
        return id
    
    async def _form_data_string(data: PackedData):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–æ–ª–∏ –≤ —Å—Ç—Ä–æ–∫—É –≥–æ—Ç–æ–≤—É—é –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        data_str = f'<code>{data.console_id}</code> - –ö–æ–¥ –∫–æ–Ω—Å–æ–ª–∏\n<code>{data.sell_date}</code> - –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏\n<code>{data.tg_id}</code> - TG_ID\n<code>{data.warranty_id}</code> - –ö–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n<code>{data.approval_date}</code> - –î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏'
        return data_str
        
    async def get_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            console_id = re.match(r'(?i)^/data ('+Format.console_code+')$', update.message.text).group(1)
            console = warranty_db.get_packed(console_id)
            if await console.exist():
                await update.message.reply_text(f'‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–æ–ª–∏\n{await ConsoleCodes._form_data_string(console)}', parse_mode='HTML')
            else:
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')

    async def add_console_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            console_id = update.message.text
            console = warranty_db.get_packed(console_id)
            if await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
            else:
                if warranty_db.add_console(console_id):
                    await update.message.reply_text('‚úÖ –ö–æ–Ω—Å–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')
    
    async def remove_console(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            console_id = re.match(r'(?i)^/remove ('+Format.console_code+')$', update.message.text).group(1)
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')  
            else:
                if warranty_db.remove_console(console_id):
                    await update.message.reply_text(f'‚úÖ –ö–æ–Ω—Å–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã\n–î–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:\n{await ConsoleCodes._form_data_string(console)}', parse_mode='HTML')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')
    
    async def sell_console(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            try:
                re_code = re.match(r'(?i)^/sell ('+Format.console_code+r') ('+Format.date_raw+r')$', update.message.text)
                console_id = re_code.group(1)
                date = re_code.group(2)
            except:
                re_code = re.match(r'(?i)^/sell ('+Format.console_code+r')$', update.message.text)
                console_id = re_code.group(1)
                date = None
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')
            if await console.sold():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª—å —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–¥–∞–Ω–∞')
            else:
                if warranty_db.sell_console(console_id, date):
                    await update.message.reply_text('‚úÖ –ö–æ–Ω—Å–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–∞—è')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')
    
    async def unsell_console(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            console_id = re.match(r'(?i)^/unsell ('+Format.console_code+')$', update.message.text).group(1)
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')
            elif not await console.sold():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª—å –Ω–µ –±—ã–ª–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–∞—è')
            else:
                if warranty_db.unsell_console(console_id):
                    await update.message.reply_text(f'‚úÖ –ö–æ–Ω—Å–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ –ø—Ä–æ–¥–∞–Ω–Ω–∞—è\n–î–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:\n{await ConsoleCodes._form_data_string(console)}', parse_mode='HTML')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')
    
    async def bind_warranty(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            re_code = re.match(r'(?i)^/bind ('+Format.console_code+') ('+Format.tg_id+')$', update.message.text)
            console_id = re_code.group(1) 
            tg_id = re_code.group(2)
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')
            if not await console.sold():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª—å –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–∞—è. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell')
            elif await console.bound():
                await update.message.reply_text('‚ûñ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫ –∫–æ–Ω—Å–æ–ª–∏ —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞')
            else:
                if warranty_db.bind_warranty(console_id, tg_id):
                    await update.message.reply_text('‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')

    async def unbind_warranty(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            console_id = re.match(r'(?i)^/unbind ('+Format.console_code+')$', update.message.text).group(1)
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')
            if not await console.bound():
                await update.message.reply_text('‚ûñ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω—Å–æ–ª–∏')
            else:
                if warranty_db.unbind_warranty(console_id):
                    await update.message.reply_text(f'‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞ –æ—Ç –∫–æ–Ω—Å–æ–ª–∏\n–î–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:\n{await ConsoleCodes._form_data_string(console)}', parse_mode='HTML')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')

    async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            try:
                re_code = re.match(r'(?i)^/approve ('+Format.console_code+r') ('+Format.date_raw+r')$', update.message.text)
                console_id = re_code.group(1)
                date = re_code.group(2)
            except:
                re_code = re.match(r'(?i)^/approve ('+Format.console_code+')$', update.message.text)
                console_id = re_code.group(1)
                date = None
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')
            if not await console.sold():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª—å –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–∞—è. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell')
            elif not await console.bound():
                await update.message.reply_text('‚ûñ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω—Å–æ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bind')
            elif await console.approved():
                await update.message.reply_text('‚ûñ –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞')
            else:
                if warranty_db.approve_warranty(console_id, date):
                    await update.message.reply_text('‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')
    
    async def unapprove(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if await ConsoleCodes._check_thread(update):
            console_id = re.match(r'(?i)^/unapprove ('+Format.console_code+')$', update.message.text).group(1)
            console = warranty_db.get_packed(console_id)
            if not await console.exist():
                await update.message.reply_text('‚ûñ –ö–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ')
            if not await console.approved():
                await update.message.reply_text('‚ûñ –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞')
            else:
                if warranty_db.unapprove_warranty(console_id):
                    await update.message.reply_text(f'‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞\n–î–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:\n{await ConsoleCodes._form_data_string(console)}', parse_mode='HTML')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É')

class UserConversation:

    from _support import _support as Support
    from _warranty import _warranty as Warranty

    licence_error_cap = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ ‚Ü©Ô∏è –ª–∏–±–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ'
    internal_error_cap = 'üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
    start_cap = "üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∏–≥—Ä–æ–≤–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏ üéÆ!\n\n" \
                    "–ó–¥–µ—Å—å –≤–∞—Å –∂–¥–µ—Ç:\n" \
                    "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ ‚Äî —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏–≥—Ä, —Å–∫–∏–¥–∫–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n" \
                    "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º.\n" \
                    "‚úÖ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –≥–∞–π–¥—ã, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n" \
                    "–°—Ç–∞–Ω—å —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º, –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫—Ä—É—Ç—ã–µ –±–æ–Ω—É—Å—ã!"
        
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        context.user_data[BotContextData.LICENCE_INDEX] = 1
        licence_photo, quantity = media_manager.get_licence_by_index(context.user_data[BotContextData.LICENCE_INDEX])
        if not licence_photo:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno} - –§–∞–π–ª—ã –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await context.bot.send_message(
                    chat_id=context._chat_id, 
                    text=UserConversation.licence_error_cap)
                await UserConversation._send_advert(update, context)
                return states.WAITING_FOR_ACTION
        else:
            logger.info(f"{quantity} –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            await update.message.reply_photo(
                    photo=licence_photo,
                    caption=f'{context.user_data[BotContextData.LICENCE_INDEX]} –∏–∑ {quantity}',
                    reply_markup=keyboards.next_licence()
                )
            return states.WAITING_FOR_LICENCE_ACCEPT
    
    async def licence_accept_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.effective_user
            query = update.callback_query
            await query.answer()
            if query.data == BotCallbackData.NEXT_LICENCE:
                context.user_data[BotContextData.LICENCE_INDEX] += 1
                licence_photo, quantity = media_manager.get_licence_by_index(context.user_data[BotContextData.LICENCE_INDEX])
                if context.user_data[BotContextData.LICENCE_INDEX] < quantity:
                    markup = keyboards.next_licence()
                elif context.user_data[BotContextData.LICENCE_INDEX] == quantity:
                    markup = keyboards.licence_accept()
                else:
                    logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                    context.bot.send_message(UserConversation.internal_error_cap)
                    return states.WAITING_FOR_LICENCE_ACCEPT
                await query.message.reply_photo(
                    photo=licence_photo,
                    caption=f"{context.user_data[BotContextData.LICENCE_INDEX]} –∏–∑ {quantity}",
                    reply_markup=markup,
                )
                return states.WAITING_FOR_LICENCE_ACCEPT
            elif query.data == BotCallbackData.LICENCE_ACCEPTED:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
                await UserConversation._send_advert(update, context)
                return states.WAITING_FOR_ACTION
            else:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\–ü–æ–ª—É—á–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π CallBack –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                context.bot.send_message(UserConversation.internal_error_cap)
                return states.WAITING_FOR_ACTION
        except Exception as ex:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è {ex}, –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞")
            context.bot.send_message(UserConversation.licence_error_cap)
            return states.WAITING_FOR_ACTION
    
    async def _send_advert(update: Update, context: ContextTypes.DEFAULT_TYPE):
        ad_media, extention = media_manager.get_random_ad()
        user_id = update.effective_user.id
        user_name = update.effective_user.name
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        tickets_db.add_user(user_id, user_name, first_name, last_name)
        if ad_media:
            if extention == "pic":
                await context.bot.send_photo(
                    chat_id=context._chat_id,
                    photo=ad_media
                )
                await context.bot.send_message(
                    chat_id=context._chat_id,
                    text=UserConversation.start_cap,
                    reply_markup=keyboards.main_menu()
                )
            else:
                await context.bot.send_video(
                    chat_id=context._chat_id,
                    video=ad_media
                )
                await context.bot.send_message(
                    chat_id=context._chat_id,
                    text=UserConversation.start_cap,
                    reply_markup=keyboards.main_menu()
                )  
        else:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ñ–∞–π–ª—ã, –ø—Ä–æ–ø—É—Å–∫")
            await context.bot.send_message(
                chat_id=context._chat_id,
                text=UserConversation.start_cap,
                reply_markup=keyboards.main_menu()
            )
    
    async def _open_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.message.chat.send_message(
                text="üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboards.main_menu()
            )
        return states.WAITING_FOR_ACTION

    async def _send_site_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        link = os.getenv('WEBSITE_URL')
        if not link:
            await query.message.edit_text(
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=keyboards.main_menu()
            )
            return states.WAITING_FOR_ACTION
            
        await query.message.edit_text(
            f"üåê –ù–∞—à —Å–∞–π—Ç: {link}\n\n",
            reply_markup=keyboards.main_menu()
        )
        return states.WAITING_FOR_ACTION
    
    async def _send_vk_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        link = os.getenv('VK_URL')
        if not link:
            await query.message.edit_text(
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=keyboards.main_menu()
            )
            return states.WAITING_FOR_ACTION
            
        await query.message.edit_text(
            f"üì± –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {link}\n\n",
            reply_markup=keyboards.main_menu()
        )
        return states.WAITING_FOR_ACTION
    
    async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "main_menu":
            return await UserConversation._open_main_menu(update, context)
        
        elif query.data == "instructions":
            return await _instructions._open_instructions_menu(update, context)
        
        elif query.data == "join_group":
            return await _user_group._open_group_join_menu(update, context)
        
        elif query.data == "reviews":
            return await _reviews._open_reviews_menu(update, context)
        
        elif query.data == "website":
            return await UserConversation._send_site_link(update, context)
        
        elif query.data == "vk":
            return await UserConversation._send_vk_link(update, context)
        
        elif query.data == "back_to_main":
            return await UserConversation._open_main_menu(update, context)


        
        elif query.data == "support":
            return await UserConversation.Support._open_support_menu(update, context)

        elif query.data == "create_ticket":
            return await UserConversation.Support._create_ticket(update, context)

        elif query.data == "my_tickets":
            return await UserConversation.Support.show_user_tickets(update, context)
        
        elif 'ticket_rating' in query.data:
            return await UserConversation.Support._rate_ticket(update, context)
        
                
        
        elif query.data == "warranty":
            return await UserConversation.Warranty._open_warranty_menu(update, context)
        
        elif query.data == "check_warranty":
            return await UserConversation.Warranty.console_id_request(update, context)
        
        
        
        return states.WAITING_FOR_ACTION
    
from _instructions import _instructions
from _user_group import _user_group
from _reviews import _reviews