import os
import logging
import re
import cv2
import easyocr
import string
import numpy as np
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
import states
import keyboards
import inspect
from database import (
    TicketDb,
    WarrantyDb
)
from enum import Enum
from media_handler import media_manager

logger = logging.getLogger(__name__)
tickets_db = TicketDb()
warranty_db = WarrantyDb()

class CallbackData(Enum):
    NEXT_LICENCE = "next_licence"
    LICENCE_ACCEPTED = "licence_accepted"

class ContextData(Enum):
    LICENCE_INDEX = "licence_index"

licence_error_cap = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ ‚Ü©Ô∏è –ª–∏–±–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ'
internal_error_cap = 'üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'

def is_valid_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = re.sub(r'\D', '', phone)
    return len(phone) in [10, 11]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} ({user.id})")
    context.user_data[ContextData.LICENCE_INDEX.value] = 1
    licence_photo, quantity = media_manager.get_licence_by_index(context.user_data[ContextData.LICENCE_INDEX.value])
    if not licence_photo:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno} - –§–∞–π–ª—ã –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await context.bot.send_message(
                chat_id=context._chat_id, 
                text=licence_error_cap)
            await send_advert(update, context)
            return states.WAITING_FOR_ACTION
    else:
        logger.info(f"{quantity} –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        await update.message.reply_photo(
                photo=licence_photo,
                caption=f'{context.user_data[ContextData.LICENCE_INDEX.value]} –∏–∑ {quantity}',
                reply_markup=keyboards.next_licence_keyboard()
            )
        return states.WAITING_FOR_LICENCE_ACCEPT

async def licence_accept_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        query = update.callback_query
        await query.answer()
        if query.data == CallbackData.NEXT_LICENCE.value:
            context.user_data[ContextData.LICENCE_INDEX.value] += 1
            licence_photo, quantity = media_manager.get_licence_by_index(context.user_data[ContextData.LICENCE_INDEX.value])
            if context.user_data[ContextData.LICENCE_INDEX.value] < quantity:
                markup = keyboards.next_licence_keyboard()
            elif context.user_data[ContextData.LICENCE_INDEX.value] == quantity:
                markup = keyboards.licence_accept_keyboard()
            else:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                context.bot.send_message(internal_error_cap)
                return states.WAITING_FOR_LICENCE_ACCEPT
            await query.message.reply_photo(
                photo=licence_photo,
                caption=f"{context.user_data[ContextData.LICENCE_INDEX.value]} –∏–∑ {quantity}",
                reply_markup=markup,
            )
            return states.WAITING_FOR_LICENCE_ACCEPT
        elif query.data == CallbackData.LICENCE_ACCEPTED.value:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
            await send_advert(update, context)
            return states.WAITING_FOR_ACTION
        else:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\–ü–æ–ª—É—á–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π CallBack –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            context.bot.send_message(internal_error_cap)
    except Exception as ex:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è {ex}, –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞")
        context.bot.send_message(licence_error_cap)

async def send_advert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cap = "üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∏–≥—Ä–æ–≤–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏ üéÆ!\n\n" \
                        "–ó–¥–µ—Å—å –≤–∞—Å –∂–¥–µ—Ç:\n" \
                        "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ ‚Äî —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏–≥—Ä, —Å–∫–∏–¥–∫–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n" \
                        "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º.\n" \
                        "‚úÖ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –≥–∞–π–¥—ã, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n" \
                        "–°—Ç–∞–Ω—å —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º, –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫—Ä—É—Ç—ã–µ –±–æ–Ω—É—Å—ã!"
    ad_media, extention = media_manager.get_random_ad()
    if ad_media:
        if extention == "pic":
            await context.bot.send_photo(
                chat_id=context._chat_id,
                photo=ad_media
            )
            await context.bot.send_message(
                chat_id=context._chat_id,
                text=cap,
                reply_markup=keyboards.get_main_menu_keyboard()
            )
        elif extention == 'vid':
            await context.bot.send_video(
                chat_id=context._chat_id,
                video=ad_media
            )
            await context.bot.send_message(
                chat_id=context._chat_id,
                text=cap,
                reply_markup=keyboards.get_main_menu_keyboard()
            )
        else:
            await context.bot.send_video(
                chat_id=context._chat_id,
                video=ad_media
            )
            await context.bot.send_message(
                chat_id=context._chat_id,
                text=cap,
                reply_markup=keyboards.get_main_menu_keyboard()
            )  
    else:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ñ–∞–π–ª—ã, –ø—Ä–æ–ø—É—Å–∫")
        await context.bot.send_message(
            chat_id=context._chat_id,
            text=cap,
            reply_markup=keyboards.get_main_menu_keyboard()
        )

async def advert_accept_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "advert_accepted":
        return states.WAITING_FOR_ACTION

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "instructions":
        await query.message.edit_text(
            "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:",
            reply_markup=keyboards.get_instructions_keyboard()
        )
        return states.WAITING_FOR_ACTION
    
    elif query.data == "join_group":
        group_id = os.getenv('USER_GROUP_ID')
        user_group_global_link = os.getenv('USER_GROUP_GLOBAL_LINK')
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏
        if query.message.text and "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º" in query.message.text:
            await query.answer("–í—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ! üéÆ")
            return states.WAITING_FOR_ACTION
            
        if query.message.text and "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã" in query.message.text:
            await query.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É! üéÆ")
            return states.WAITING_FOR_ACTION
            
        if query.message.text and "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ" in query.message.text:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
            return states.WAITING_FOR_ACTION
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
            chat_member = await context.bot.get_chat_member(chat_id=group_id, user_id=user_id)
            
            if chat_member.status in ['member', 'administrator', 'creator']:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.edit_text(
                    "‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã!\n\n"
                    "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: "+user_group_global_link+"\n\n"
                    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! üéÆ",
                    reply_markup=keyboards.get_main_menu_keyboard()
                )
                return states.WAITING_FOR_ACTION
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å
            try:
                # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω
                await context.bot.unban_chat_member(
                    chat_id=group_id,
                    user_id=user_id,
                    only_if_banned=True
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.approve_chat_join_request(
                    chat_id=group_id,
                    user_id=user_id
                )
                
                await query.message.edit_text(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É GameHub!\n\n"
                    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n\n"
                    "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: https://t.me/+1BmAG12rjZg2MmRi\n\n"
                    "–í –≥—Ä—É–ø–ø–µ –≤–∞—Å –∂–¥–µ—Ç:\n"
                    "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏\n"
                    "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                    "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
                    "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏",
                    reply_markup=keyboards.get_main_menu_keyboard()
                )
            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                invite_link = await context.bot.create_chat_invite_link(
                    chat_id=group_id,
                    expire_date=datetime.now() + timedelta(days=1),
                    member_limit=1
                )
                await query.message.edit_text(
                    "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: https://t.me/+1BmAG12rjZg2MmRi\n\n"
                    f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {invite_link.invite_link}\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º, "
                    "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=keyboards.get_main_menu_keyboard()
                )
        except Exception as e:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif query.data == "reviews":
        await query.message.edit_text(
            "‚≠êÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:",
            reply_markup=keyboards.get_reviews_keyboard()
        )
    
    elif query.data == "main_menu":
        await query.message.edit_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return states.WAITING_FOR_ACTION
    
    elif query.data == "website":
        link = os.getenv('WEBSITE_URL')
        if not link:
            await query.message.edit_text(
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=keyboards.get_main_menu_keyboard()
            )
            return states.WAITING_FOR_ACTION
            
        await query.message.edit_text(
            f"üåê –ù–∞—à —Å–∞–π—Ç: {link}\n\n",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return states.WAITING_FOR_ACTION
    
    elif query.data == "vk":
        link = os.getenv('VK_URL')
        if not link:
            await query.message.edit_text(
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=keyboards.get_main_menu_keyboard()
            )
            return states.WAITING_FOR_ACTION
            
        await query.message.edit_text(
            f"üì± –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {link}\n\n",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return states.WAITING_FOR_ACTION

    elif query.data == "support":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_tickets = tickets_db.get_all_tickets(query.from_user.id)
        active_tickets = [t for t in active_tickets if t[8] != 'answered']  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ
        
        if active_tickets:
            message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
            for ticket in active_tickets:
                message += (
                    "--------------------\n"
                    f"üÜî –¢–∏–∫–µ—Ç #{ticket[2]}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket[3]}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[7]}\n"
                    f"üìÖ –î–∞—Ç–∞: {ticket[9]}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n\n"
                )
            
            message += "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            message += "1. –î–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã\n"
            message += "2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã)\n"

            await query.message.edit_text(
                message,
                reply_markup=keyboards.get_support_keyboard()
            )
        else:
            await query.message.edit_text(
                "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboards.get_support_keyboard()
            )
        return states.WAITING_FOR_ACTION

    elif query.data == "create_ticket":
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
        active_tickets = tickets_db.get_all_tickets(query.from_user.id)
        active_tickets = [t for t in active_tickets if t[8] != 'answered']
        for ticket in active_tickets:
            tickets_db.update_ticket_status(ticket[0], 'closed')

        await query.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "1. –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Ç.–¥.)\n"
            "2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "3. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "4. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        return states.WAITING_FOR_TICKET_DESCRIPTION

    elif query.data == "my_tickets":
        await show_user_tickets(update, context)
        return states.WAITING_FOR_ACTION
    
    elif 'ticket_rating' in query.data:
        ticket_id = context.user_data.pop('closed_ticket_id', None)
        if not ticket_id:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ç–∏–∫–µ—Ç–∞: {e}")
            return states.WAITING_FOR_ACTION
        rating = int(query.data.split(' ')[1])
        tickets_db.rate_ticket(ticket_id, rating)
        await query.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return states.WAITING_FOR_ACTION
    
    elif query.data == "warranty":
        try:
            link = os.getenv('WARRANTY_CONDITIONS_URL')
        except e as Exception:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏: {e}")
            link = 'https://docs.google.com/document/u/0/'
        await query.message.edit_text(
            "üîí –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–∫–ª—é—á–∞–µ—Ç:\n\n"
            "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞)\n"
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —Å—Ä–æ–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—É—é –∑–∞–º–µ–Ω—É –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–∏–Ω–∫–∏\n"
            "‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é:\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "+"üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"+" –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Å–æ–ª–∏. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏\n"
            "2Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –∫—É–ø–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–∑—ã–≤—É —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏.\n"
            "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞.\n\n",
            reply_markup=keyboards.get_warranty_keyboard(),
            parse_mode = 'HTML',
            disable_web_page_preview=True
        )
        return states.WAITING_FOR_ACTION
    
    elif query.data == "submit_review":
        await query.message.edit_text(
            "‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Å–æ–ª–∏.\n",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        return states.WAITING_FOR_REVIEW_CHECK
    
    elif query.data == "check_warranty":
        await query.message.edit_text(
            "‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Å–æ–ª–∏.\n",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        return states.WAITING_FOR_WARRANTY_CHECK
    
    elif query.data == "back_to_main":
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return states.WAITING_FOR_ACTION
    
    return states.WAITING_FOR_ACTION

async def handle_ticket_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    photo = update.message.photo[-1] if update.message.photo else None
    video = update.message.video if update.message.video else None
    document = update.message.document if update.message.document else None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    description = update.message.caption if (photo or video or document) else update.message.text
    
    if not description:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–º—É —Ç–∏–∫–µ—Ç—É."
        )
        return states.WAITING_FOR_TICKET_DESCRIPTION
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} ({user.id})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_id = len(tickets_db.get_all_tickets(user.id)) + 1
    tickets_db.add_ticket(
        user_id=user.id,
        ticket_id=ticket_id,
        description=description,
        photo_id=photo.file_id if photo else None,
        video_id=video.file_id if video else None,
        file_id=document.file_id if document else None
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n\n"
        "üì± –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
        "‚Ä¢ 89123456789\n"
        "‚Ä¢ 79001234567\n"
        "‚Ä¢ 89991234567\n\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ +7 (123) 456-78-90\n"
        "‚Ä¢ 8-123-456-78-90\n"
        "‚Ä¢ 123456789\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä):"
    )
    return states.WAITING_FOR_PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user = update.effective_user
    phone = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if not is_valid_phone(phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "üì± –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
            "‚Ä¢ 89123456789\n"
            "‚Ä¢ 79001234567\n"
            "‚Ä¢ 89991234567\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä):"
        )
        return states.WAITING_FOR_PHONE
    
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} ({user.id})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    ticket = tickets_db.get_latest_ticket(user.id)
    if ticket:
        tickets_db.update_ticket_phone(ticket[0], phone)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_group_id = os.getenv('SUPPORT_GROUP_ID')
        if support_group_id:
            message = (
                f"üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket[2]}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìÖ –î–∞—Ç–∞: {ticket[9]}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket[3]}\n\n"
                f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{user.id}_{ticket[2]}"
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if ticket[4]:  # photo_id
                    await context.bot.send_photo(
                        chat_id=support_group_id,
                        photo=ticket[4],
                        caption=message
                    )
                elif ticket[5]:  # video_id
                    await context.bot.send_video(
                        chat_id=support_group_id,
                        video=ticket[5],
                        caption=message
                    )
                elif ticket[6]:  # file_id
                    await context.bot.send_document(
                        chat_id=support_group_id,
                        document=ticket[6],
                        caption=message
                    )
                else:
                    await context.bot.send_message(chat_id=support_group_id, text=message, parse_mode='HTML')
            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∏–∫–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=keyboards.get_main_menu_keyboard()
                )
                return states.WAITING_FOR_ACTION
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã'.",
        reply_markup=keyboards.get_main_menu_keyboard()
    )
    
    return states.WAITING_FOR_ACTION

async def handle_ticket_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–∏–∫–µ—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_group_id = os.getenv('SUPPORT_GROUP_ID')
    if str(update.effective_chat.id) != support_group_id:
        return states.WAITING_FOR_TICKET_RESPONSE

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã /reply_
    if not update.message.text or not update.message.text.startswith('/reply_'):
        return states.WAITING_FOR_TICKET_RESPONSE

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = update.message.text.split('_', 2)
        if len(parts) < 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_USER_ID_TICKET_ID —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"
            )
            return states.WAITING_FOR_TICKET_RESPONSE

        user_id = int(parts[1])
        ticket_id = int(parts[2].split()[0])
        response_text = update.message.text.split(' ', 1)[1] if ' ' in update.message.text else ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        photo = update.message.photo[-1] if update.message.photo else None
        video = update.message.video if update.message.video else None
        document = update.message.document if update.message.document else None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        if not response_text and not photo and not video and not document:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª."
            )
            return states.WAITING_FOR_TICKET_RESPONSE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        tickets_db.add_response(
            ticket_id=ticket_id,
            user_id=user_id,
            response_text=response_text,
            photo_id=photo.file_id if photo else None,
            video_id=video.file_id if video else None,
            file_id=document.file_id if document else None
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        tickets_db.update_ticket_status(ticket_id, 'answered')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if photo:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo.file_id,
                    caption=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                )
            elif video:
                await context.bot.send_video(
                    chat_id=user_id,
                    video=video.file_id,
                    caption=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                )
            elif document:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=document.file_id,
                    caption=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{response_text}"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
            context.user_data['closed_ticket_id'] = ticket_id
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.",
                reply_markup=keyboards.get_supp_rating_keyboard()
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}"
            )
        except Exception as e:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )

    except Exception as e:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

    return states.WAITING_FOR_TICKET_RESPONSE

async def show_user_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    query = update.callback_query
    
    tickets = tickets_db.get_all_tickets(user.id)
    if not tickets:
        message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤."
    else:
        message = "üìã –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:\n\n"
        for ticket in tickets:
            status = "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ" if ticket[8] == 'answered' else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            message += (
                "--------------------\n"
                f"üÜî –¢–∏–∫–µ—Ç #{ticket[2]}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: \n{ticket[3]}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[7]}\n"
                f"üìÖ –î–∞—Ç–∞: {ticket[9]}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–∫–µ—Ç
            responses = tickets_db.get_ticket_responses(ticket[0])
            if responses:
                message += "\nüí¨ –û—Ç–≤–µ—Ç—ã:\n"
                for i, response in enumerate(responses, 1):
                    message += f"{i}. {response[3]}\n"
                    if response[4]:  # photo_id
                        message += "   üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ\n"
                    if response[5]:  # video_id
                        message += "   üé• –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–∏–¥–µ–æ\n"
                    if response[6]:  # file_id
                        message += "   üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª\n"
            
            message += "\n"
    
    if query:
        await query.message.edit_text(message, reply_markup=keyboards.get_main_menu_keyboard())
    else:
        await update.message.reply_text(message, reply_markup=keyboards.get_main_menu_keyboard())

async def handle_direct_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /reply_
    if not update.message.text.startswith('/reply_'):
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /reply_USER_ID —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = update.message.text.split(' ', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
        if len(parts) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
            return

        command_part = parts[0]  # /reply_USER_ID
        message_text = parts[1]  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        try:
            user_id = int(command_part.split('_')[1])
        except (IndexError, ValueError):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_USER_ID —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: \n\n{message_text}'
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            )
        except Exception as e:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )

    except Exception as e:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_newsletter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_group_id = os.getenv('SUPPORT_GROUP_ID')
    if str(update.effective_chat.id) != support_group_id:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    message_text = update.message.text.replace('/newsletter', '').strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = tickets_db.get_all_users()
    
    success_count = 0
    fail_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id in users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            success_count += 1
        except Exception as e:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    await update.message.reply_text(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )

async def handle_review_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        console_id = update.message.text
        user_id = update.message.chat_id
        console_data = warranty_db.get_console_data(console_id)
        
        if not console_data:
            await update.message.reply_text(
                "‚ùå –í–∞—à–∞ –∫–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n"
                "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–¥–∫—É.",
                reply_markup=keyboards.get_back_to_main_keyboard()
            )
            return states.WAITING_FOR_REVIEW_CHECK
        
        if str(console_data[1]['warranty check']) == '':
            warranty_id = warranty_db.generate_warranty_id(console_id)
            if warranty_db.bind_console_to_user(console_id, console_data[0], user_id, warranty_id):
                pass
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –≤–∞—à–µ–π –∫–æ–Ω—Å–æ–ª–∏.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    reply_markup=keyboards.get_back_to_main_keyboard()
                )
                return states.WAITING_FOR_REVIEW_CHECK
            if warranty_id:
                context.user_data['console data'] = console_data
                await update.message.reply_text(
                    f"üì∏ –í–∞—à –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏ {warranty_id}.\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.",
                    reply_markup=keyboards.get_back_to_main_keyboard()
                )
                return states.WAITING_FOR_PHOTO_CHECK
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    reply_markup=keyboards.get_back_to_main_keyboard()
                )
                return states.WAITING_FOR_REVIEW_CHECK
        elif str(console_data[1]['warranty check']) == '0':
            context.user_data['console data'] = console_data
            await update.message.reply_text(
                f"üì∏ –í–∞—à –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏ {console_data[1]['warranty id']}\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.",
                reply_markup=keyboards.get_back_to_main_keyboard()
            )
            return states.WAITING_FOR_PHOTO_CHECK
        else:
            registration_date = datetime.strptime(console_data[1]['sell date'], '%d.%m.%Y')
            warranty_end = registration_date + timedelta(days=int(os.getenv('WARRANTY_DURATION')) + int(os.getenv('WARRANTY_COMPENSATION')))
            remaining_days = (warranty_end - datetime.now()).days
            await update.message.reply_text(
                f"‚úÖ –í–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}",
                reply_markup=keyboards.get_back_to_main_keyboard()
            )
            return states.WAITING_FOR_PHOTO_CHECK
    except Exception as e:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    
async def handle_warranty_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∞—Ä–∞–Ω—Ç–∏–π
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ warranty_db.warranty_check
    –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∞–∫ –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç warranty_db.warranty_check
    '''
    try:
        console_id = update.message.text
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–æ–Ω—Å–æ–ª–∏ {console_id}")
        result = warranty_db.warranty_check(console_id)
        if result:
            await update.message.reply_text(
                        result[0],
                        reply_markup=result[1]()
                    )
            return states.WAITING_FOR_ACTION
        else:
            await update.message.reply_text(
                "‚ùå –í–∞—à–∞ –∫–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–¥–∫—É.",
                reply_markup=keyboards.get_back_to_main_keyboard()
            )
            return states.WAITING_FOR_REVIEW_CHECK
    except Exception as e:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return states.WAITING_FOR_ACTION

async def handle_review_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ callback_query
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_main":
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboards.get_main_menu_keyboard()
            )
            return states.WAITING_FOR_ACTION
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = update.message
    
    if not (message.photo or message.document):
        await message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        return states.WAITING_FOR_PHOTO_CHECK
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file = await message.photo[-1].get_file() if message.photo else message.document
        photo_bytes = await file.download_as_bytearray()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
        image = cv2.imdecode(
            np.frombuffer(photo_bytes, np.uint8),
            cv2.IMREAD_COLOR
        )
        processed_image = cv2.threshold(
            cv2.GaussianBlur(
                cv2.cvtColor(image, cv2.COLOR_BGR2GRAY),
                (1, 1), 0
            ),
            100, 255, cv2.THRESH_BINARY
        )[1]

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        reader = easyocr.Reader(['en'])
        recognized_text = " ".join(
            reader.readtext(
                processed_image,
                detail=0,
                allowlist=string.ascii_letters.upper()
            )
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –∫–æ–¥–∞
        console_index, console_data = context.user_data.pop('console data', None)
        if not console_data:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å–æ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")

        warranty_code = console_data['warranty id']
        if not re.search(warranty_code, recognized_text):
            await message.reply_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–µ–∑–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è.',
                reply_markup=keyboards.get_warranty_keyboard()
            )
            return states.WAITING_FOR_ACTION

        # –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        warranty_db.warranty_approval_write(console_data, console_index)
        await message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 548 –¥–Ω–µ–π:\n"
            "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∑–∞ –Ω–∞—à —Å—á–µ—Ç\n"
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç\n"
            "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –≥–∞—Ä–∞–Ω—Ç–∏–∏.",
            reply_markup=keyboards.get_warranty_keyboard()
        )

    except Exception as e:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.get_warranty_keyboard()
        )

    return states.WAITING_FOR_ACTION

async def handle_manual_warranty_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if str(update.effective_chat.id) != os.getenv('SUPPORT_GROUP_ID'):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–Ω–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {update.effective_chat.id}")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω—Å–æ–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        console_id = int(command.split('_')[-1])

        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ {console_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å–æ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        index, console_data = warranty_db.get_console_data(console_id)
        if not console_data:
            await update.message.reply_text("‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        elif str(console_data['tg id']) == '':
            await update.message.reply_text("‚ùå –ö–æ–Ω—Å–æ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        elif str(console_data['warranty check']) == '1':
            await update.message.reply_text("‚ùå –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å–æ–ª—å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
            return
        
        user_id = console_data['tg id']
        approve_warranty = warranty_db.warranty_approval_write(console_id, index)
        # –û–¥–æ–±—Ä—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é
        if approve_warranty:
            await update.message.reply_text("‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ {console_id}!\n\n"
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 548 –¥–Ω–µ–π:\n"
                         "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∑–∞ –Ω–∞—à —Å—á–µ—Ç\n"
                         "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç\n"
                         "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
                         "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –≥–∞—Ä–∞–Ω—Ç–∏–∏.",
                    reply_markup=keyboards.get_warranty_keyboard()
                )
            except Exception as e:
                logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.") 
    