import keyboards
import states
import cv2
import easyocr
import states
import keyboards
import inspect
import logging
import os
import re
import numpy as np
from database import WarrantyDb
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
from database import PackedData as PacketData

logger = logging.getLogger(__name__)

warranty_db = WarrantyDb()

class ContextDataTypes:
    console_data = 'console_data'
    console_id = 'console_id'

class _OCR:
        
    async def recognize(file, console_id):

        photo_bytes = await file.download_as_bytearray()
                
        image = cv2.imdecode(
            np.frombuffer(photo_bytes, np.uint8),
            cv2.IMREAD_COLOR
        )
        processed_image = cv2.threshold(
            cv2.GaussianBlur(
                cv2.cvtColor(image, cv2.COLOR_BGR2GRAY),
                (1, 1), 0
            ),
            100, 255, cv2.THRESH_BINARY
        )[1]

        reader = easyocr.Reader(['ru'])
        recognized_text = " ".join(
            reader.readtext(
                processed_image,
                allowlist ='0123456789',
                detail=0,
            )
        )
        
        if not console_id:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å–æ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")

        warranty_id = warranty_db._get_warranty_id(console_id)

        if re.search(str(warranty_id.upper()), recognized_text):
            return True
        else:
            return False

class _warranty:

    warranty_duration = int(os.getenv('WARRANTY_DURATION'))
    delivery_compensation = int(os.getenv('WARRANTY_COMPENSATION'))
    warranty_bind_period = int(os.getenv('WARRANTY_BIND_PERIOD'))
    
    async def _open_warranty_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.message.edit_text(
            "üîí –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–∫–ª—é—á–∞–µ—Ç:\n\n"
            "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞)\n"
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —Å—Ä–æ–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—É—é –∑–∞–º–µ–Ω—É –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–∏–Ω–∫–∏\n"
            "‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é:\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç <u>‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏</u> –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Å–æ–ª–∏. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏\n"
            "2Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –∫—É–ø–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–∑—ã–≤—É —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏.\n"
            "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞.\n\n",
            reply_markup=keyboards.warranty(),
            parse_mode = 'HTML',
            disable_web_page_preview=True
        )
        return states.WAITING_FOR_ACTION

    async def _check_remainig(data: PacketData):
        registration_date = datetime.strptime(data.approval_date, '%d-%m-%Y')
        warranty_end = registration_date + timedelta(days=_warranty.warranty_duration + _warranty.delivery_compensation)
        remaining_days = (warranty_end - datetime.now()).days
        return remaining_days
        
    
    async def _check_bind_period(data: PacketData):
        sell_date = datetime.strptime(data.sell_date, '%d-%m-%Y')
        period_end = sell_date + timedelta(days=_warranty.warranty_bind_period)
        remaining_days = (period_end - datetime.now()).days
        if remaining_days <= 0:
            return False
        else:
            return True

    async def console_id_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.message.edit_text(
            "‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Å–æ–ª–∏.\n",
            reply_markup=keyboards.back_to_main_menu()
        )
        return states.WAITING_FOR_WARRANTY_CHECK
        
    async def check_review_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            if query.data == "back_to_main":
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboards.main_menu()
                )
                return states.WAITING_FOR_ACTION
        
        message = update.message
        
        if not (message.photo or message.document):
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞.",
                reply_markup=keyboards.back_to_main_menu()
            )
            return states.WAITING_FOR_PHOTO_CHECK
        
        try:
            file = await message.photo[-1].get_file() if message.photo else message.document
            console: PacketData = context.user_data.pop(ContextDataTypes.console_data, None)
            console_id = console.console_id
            if await _OCR.recognize(file, console_id):
                warranty_db.approve_warranty(console_id)
                await message.reply_text(
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 548 –¥–Ω–µ–π:\n"
                    "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∑–∞ –Ω–∞—à —Å—á–µ—Ç\n"
                    "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç\n"
                    "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –≥–∞—Ä–∞–Ω—Ç–∏–∏.",
                    reply_markup=keyboards.warranty()
                )
                return states.WAITING_FOR_ACTION
            else:
                await message.reply_text(
                    '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–µ–∑–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è.',
                    reply_markup=keyboards.warranty()
                )
                return states.WAITING_FOR_ACTION
        except Exception as e:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            await message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=keyboards.warranty()
            )
        return states.WAITING_FOR_ACTION
    
    async def warranty_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            if query.data == "back_to_main":
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboards.main_menu()
                )
                return states.WAITING_FOR_ACTION
            
        try:
            console_id = update.message.text
            user_id = update.message.chat_id
            console = warranty_db.get_packed(console_id)
            
            if not await console.exist():
                await update.message.reply_text(
                    "‚ùå –í–∞—à–∞ –∫–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                    "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–¥–∫—É.",
                    reply_markup=keyboards.back_to_main_menu()
                )
                return states.WAITING_FOR_ACTION

            if await console.approved():
                remaining_days = await _warranty._check_remainig(console)
                if remaining_days > 0:
                    await update.message.reply_text(
                        f"‚úÖ –í–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}.",
                        reply_markup=keyboards.back_to_main_menu()
                    )
                    return states.WAITING_FOR_ACTION
                else:
                    await update.message.reply_text(
                        f"‚ûñ –í–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è –∏—Å—Ç–µ–∫–ª–∞.",
                        reply_markup=keyboards.back_to_main_menu()
                    )
                    return states.WAITING_FOR_ACTION
            else:
                if await console.bound():
                    await update.message.reply_text(
                        "‚ûñ –í–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                        f"–í–∞—à –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏ {console.warranty_id}.\n"
                        "–î–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.",
                        reply_markup=keyboards.back_to_main_menu()
                    )
                    context.user_data[ContextDataTypes.console_data] = console
                    return states.WAITING_FOR_PHOTO_CHECK
                else:
                    if await console.sold():
                        if await _warranty._check_bind_period(console):
                            pass
                        else:
                            await update.message.reply_text(
                                "‚ûñ –° –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 90 –¥–Ω–µ–π. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                reply_markup=keyboards.back_to_main_menu()
                            )
                            return states.WAITING_FOR_ACTION
                        if warranty_db.bind_warranty(console_id, user_id):
                            console = warranty_db.get_packed(console_id)
                            await update.message.reply_text(
                                "‚ûñ –í–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                                f"–í–∞—à –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏–∏ {console.warranty_id}.\n"
                                "–î–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.",
                                reply_markup=keyboards.back_to_main_menu()
                            )
                            context.user_data[ContextDataTypes.console_data] = console
                            return states.WAITING_FOR_PHOTO_CHECK
                        else:
                            await update.message.reply_text(
                                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ–Ω—Å–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                reply_markup=keyboards.back_to_main_menu()
                            )
                            return states.WAITING_FOR_ACTION
                    else:
                        await update.message.reply_text(
                            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ–Ω—Å–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            reply_markup=keyboards.back_to_main_menu()
                        )
                        return states.WAITING_FOR_ACTION
        except Exception as e:
            logger.error(f"{inspect.currentframe().f_code.co_name} - {inspect.currentframe().f_lineno}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
